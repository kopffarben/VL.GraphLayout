[Summary("Increments values in a buffer.")]
shader ComputeRepulsiveForce_ComputeFX : ComputeShaderBase
{
    float3  area                = float3(10.0, 10.0, 10.0);  
    float   damping             = 0.01;

    StructuredBuffer<float3>    nodeBuffer;
    StructuredBuffer<bool>      enabledBuffer;
    RWByteAddressBuffer         dispBuffer;

    override void Compute()
    {
        uint index = streams.DispatchThreadId.x;
        
        uint numNodes, stride;
        nodeBuffer.GetDimensions(numNodes,stride);

        if (index>numNodes) return;

        
        if (enabledBuffer[index])
        {
			float3 disp=float3(0, 0, 0);	//displacement of a node
		
            if (damping > 0.001)
            {
                float3 K = float3(sqrt((area.x*area.x)/((float)numNodes)),sqrt((area.y*area.y)/((float)numNodes)),sqrt((area.z*area.z)/((float)numNodes)));

                // Compute repulsive force
                for (uint i=0; i<numNodes;i++)
		        {
                    if (enabledBuffer[i])
                    {
			            if (i!=index)
			            {
				            float3 delta    = nodeBuffer[index]-nodeBuffer[i];
				            float dist      = length(delta);
				            float3 f        = K*K/dist;
				            disp            = disp + normalize(delta)*f;
			            }
                    }
		        }              
            }

            float3 dampFromCenter = 1-max(0,min(1,(length(nodeBuffer[index])/area)));
            disp = disp * dampFromCenter * dampFromCenter;
			
			if (length(disp) > 0.5)
			{ 
				float outval;
				disp = disp * damping;
				dispBuffer.InterlockedExchange((index * 3 + 0) * 4 ,disp.x ,outval);
				dispBuffer.InterlockedExchange((index * 3 + 1) * 4 ,disp.y ,outval);
				dispBuffer.InterlockedExchange((index * 3 + 2) * 4 ,disp.z ,outval);
				//dispBuffer[index] = disp * damping;
			}

        }

    }
};